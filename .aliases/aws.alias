#!/usr/bin/env bash

cf() {
  local action=$1
  shift

  case $action in
    ls)
      aws cloudformation list-stacks \
        --query "StackSummaries[?StackStatus != 'DELETE_COMPLETE'].StackName" \
        --output text \
      | tr '\t' '\n'
      ;;
    destroy)
      local stack=$1
      shift 1
      aws cloudformation delete-stack \
        --stack-name $stack
      ;;
    outputs)
      local stack=$1
      if shift 1; then
        aws cloudformation describe-stacks \
          --stack-name "$stack" \
          | jq '.Stacks[0].Outputs
            | map({key: .OutputKey, value: .OutputValue})
            | from_entries'
      else
        aws cloudformation describe-stacks \
          | jq '.Stacks[] | {
            stack: .StackName,
            outputs: (.Outputs // [])
              | map({key: .OutputKey, value: .OutputValue})
              | from_entries
            }'
      fi
      ;;
    protect)
      local stack=$1
      shift 1
      aws cloudformation update-termination-protection \
        --stack-name $stack \
        --enable-termination-protection
      ;;
    unprotect)
      local stack=$1
      shift 1
      aws cloudformation update-termination-protection \
        --stack-name $stack \
        --no-enable-termination-protection
      ;;
    *)
      echo >&2 "Usage: cf <command> [optios...]"
      echo >&2 ""
      echo >&2 "       cf ls"
      echo >&2 "       cf destroy <stack>"
      echo >&2 "       cf outputs [stack]"
      echo >&2 "       cf protect [stack]"
      echo >&2 "       cf unprotect [stack]"
      ;;
  esac
}

ssm() {
  local action=$1
  shift

  case $action in
    ls)
      local path=${1:-/}
      shift || :

      aws ssm get-parameters-by-path \
        --recursive \
        --path "$path" \
        --query 'Parameters[].Name | join(`"\n"`, @)' \
        --output text
    ;;
    cat)
      local path=$1

      aws ssm get-parameter \
        --name "$path" \
        --query Parameter.Value \
        --output text
    ;;
    cat-dec)
      local path=$1

      aws ssm get-parameter \
        --name "$path" \
        --with-decryption \
        --query Parameter.Value \
        --output text
    ;;
    put)
      local path=$1
      local value=$2
      shift 2

      aws ssm put-parameter \
        --name "$path" \
        --type String \
        --value "$value" \
        "$@"
    ;;
    put-enc)
      local path=$1
      local value=$2
      shift 2

      aws ssm put-parameter \
        --name "$path" \
        --type SecureString \
        --value "$value" \
        "$@"
    ;;
    rm)
      local path=$1
      shift 1

      aws ssm delete-parameter \
        --name "$path" \
        "$@"
    ;;
    *)
      echo >&2 "Usage: ssm <command> [optios...]"
      echo >&2 ""
      echo >&2 "       ssm ls [path]"
      echo >&2 "       ssm cat <path>"
      echo >&2 "       ssm cat-dec <path>"
      echo >&2 "       ssm put <path> <value>"
      echo >&2 "       ssm put-enc <path> <value>"
      echo >&2 "       ssm rm <path>"
      ;;
  esac
}

s3() {
  local action=$1
  shift

  case $action in
    cat)
      local path=$1
      local s3url=s3://${path#s3://}

      aws s3 cp $s3url -
    ;;
    zcat)
      local path=$1

      s3 cat $path |  gzip -cd
    ;;
    rm)
      local path=$1
      local s3url=s3://${path#s3://}

      aws s3 rm $s3url
    ;;
    head)
      local path=$1
      local bucketkey=${path#s3://}
      local bucket=${bucketkey%%/*}
      local key=${bucketkey#*/}

      aws s3api head-object --bucket "$bucket" --key "$key"
    ;;
    tags)
      local path=$1
      local bucketkey=${path#s3://}
      local bucket=${bucketkey%%/*}
      local key=${bucketkey#*/}

      aws s3api get-object-tagging --bucket "$bucket" --key "$key"
    ;;
    *)
      echo >&2 "Usage: s3 <command> [optios...]"
      echo >&2 ""
      echo >&2 "       s3 cat <s3url>"
      echo >&2 "       s3 zcat <s3url>"
      echo >&2 "       s3 rm <s3url>"
      echo >&2 "       s3 head <s3url>"
      ;;
  esac
}

ecr() {
  local action=$1
  shift

  case $action in
    tags)
      local repo=$1
      aws ecr list-images --repository $repo | jq -r .imageIds[].imageTag
    ;;

    rmi)
      local repo=$1
      aws ecr list-images --repository $repo
    ;;
    *)
      echo >&2 "Usage: ecr <command> <repo> [optios...]"
      echo >&2 ""
      echo >&2 "       ecr ls <repo>"
      echo >&2 "       ecr rmi <repo> <images...>"
      ;;
  esac
}

aws-login() {
  local profile=$1

  url=$(aws-vault login --stdout "$profile") || {
    echo "$url"
    return
  }

  firefox "ext+container:name=$profile&url=${url//&/%26}"
}

aws-logs() {
  local action=$1
  shift

  case $action in
    groups|'')
      aws logs describe-log-groups \
        --query logGroups[].logGroupName \
        --output text \
        | tr '\t' '\n'
      ;;
    tail)
      local group=$1
      shift 2
      aws logs tail $group \
        "$@"
      ;;
  esac
}

lambda-at-edge() {
  local action=$1
  shift

  case $action in
    ''|logs)
      local IFS=$'\n'
      local region
      for region in $(aws ec2 describe-regions | jq -r .Regions[].RegionName); do
        echo "Region: $region"
        aws --region "$region" \
          logs describe-log-groups \
            --log-group-name-prefix /aws/lambda/us-east-1. \
            | jq -r .logGroups[].logGroupName
      done
      ;;
    *)
      echo >&2 "Usage: lambda-at-edge <command>"
      echo >&2 ""
      echo >&2 "       lambda-at-edge logs"
      ;;
  esac
}

ecr() {
  local action=$1
  shift

  case $action in
    ls)
      aws ecr describe-repositories \
        --query repositories[].repositoryName \
        --output text \
        | tr '\t' '\n'
      ;;

    lsi)
      local repo=$1
      shift
      aws ecr describe-images \
        --repository-name $repo \
        --query imageDetails |
          jq -r '.[] | [.imagePushedAt, .imageTags[0], .imageSizeInBytes/1024/1024] | @tsv' |
          sort -k 2 -r
      ;;

    *)
      echo >&2 "Usage: ecr <command>"
      echo >&2 ""
      echo >&2 "       ecr ls"
      echo >&2 "       ecr lsi"
      ;;
  esac


}
